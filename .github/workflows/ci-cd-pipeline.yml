# .github/workflows/ci-cd-pipeline.yml
name: DevOps Portfolio CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: profile
  EKS_CLUSTER_NAME: profile-cluster
  NODE_VERSION: '20'

jobs:
  # 1. Frontend Build & Test
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Type checking
      run: pnpm run type-check
    
    - name: Lint
      run: pnpm run lint
    
    # - name: Unit tests
    #   run: pnpm run test:unit
    
    - name: Build application
      run: pnpm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dist/
        retention-days: 1

  # 2. Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: frontend-ci
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # 3. Docker Build & Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-ci, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: dist/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  # 4. Infrastructure Deployment
  infrastructure-deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
    
    - name: Install Pulumi dependencies
      run: pnpm install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Pulumi Preview
      uses: pulumi/actions@v4
      with:
        command: preview
        stack-name: production
        work-dir: ./infrastructure
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    
    # - name: Pulumi Up
    #   uses: pulumi/actions@v4
    #   with:
    #     command: up
    #     stack-name: production
    #     work-dir: ./infrastructure
    #   env:
    #     PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # 5. Kubernetes Deployment Update
  k8s-deploy:
    runs-on: ubuntu-latest
    needs: [docker-build, infrastructure-deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    
    - name: Update deployment image
      run: |
        kubectl set image deployment/devops-portfolio-app \
          devops-portfolio-app=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
          -n devops-portfolio
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/devops-portfolio-app -n devops-portfolio
        kubectl get pods -n devops-portfolio

  # 6. GitOps - ArgoCD Sync (Optional)
  # argocd-sync:
  #   runs-on: ubuntu-latest
  #   needs: k8s-deploy
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - name: Checkout GitOps repo
  #     uses: actions/checkout@v4
  #     with:
  #       repository: your-username/devops-portfolio-gitops
  #       token: ${{ secrets.GITOPS_TOKEN }}
  #       path: gitops
    
  #   - name: Update image tag in GitOps repo
  #     run: |
  #       cd gitops
  #       sed -i 's|image: .*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}|' k8s/deployment.yaml
  #       git config user.name "GitHub Actions"
  #       git config user.email "actions@github.com"
  #       git add .
  #       git commit -m "Update image tag to ${{ github.sha }}"
  #       git push

  # 7. Monitoring & Notifications
  monitoring-check:
    runs-on: ubuntu-latest
    needs: k8s-deploy
    if: always()
    
    steps:
    - name: Health check
      run: |
        # アプリケーションのヘルスチェック
        curl -f https://your-portfolio-domain.com/health || exit 1