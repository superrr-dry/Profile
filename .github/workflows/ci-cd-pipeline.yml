# .github/workflows/ci-cd-pipeline.yml
name: DevOps Portfolio CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-northeast-1
  NODE_VERSION: '20'
  PULUMI_STACK_NAME: dev

permissions:
  contents: read          # „É™„Éù„Ç∏„Éà„É™ÂÜÖÂÆπ„ÅÆË™≠„ÅøÂèñ„Çä
  security-events: write  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç§„Éô„É≥„ÉàÔºàSARIFÔºâ„ÅÆÊõ∏„ÅçËæº„Åø
  actions: read          # Actions „ÅÆË™≠„ÅøÂèñ„Çä
  id-token: write        # OIDC „Éà„Éº„ÇØ„É≥„ÅÆÊõ∏„ÅçËæº„Åø

jobs:
  # 1. Frontend Build & Test
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Type checking
      run: pnpm run type-check
    
    - name: Lint
      run: pnpm run lint
    
    # - name: Unit tests
    #   run: pnpm run test:unit
    
    - name: Generate skills data
      run: node scripts/fetch-skills.cjs > public/skills.json
      env:
        GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
        GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
        GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
        GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
    
    - name: Build application
      run: pnpm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dist/
        retention-days: 1

  # 2. Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: frontend-ci
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # 3. Infrastructure Deployment
  infrastructure-deploy:
    runs-on: ubuntu-latest
    needs: [frontend-ci, security-scan]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
    
    - name: Install Pulumi dependencies
      run: pnpm install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Pulumi Preview
      uses: pulumi/actions@v6
      with:
        command: preview
        stack-name: ${{ env.PULUMI_STACK_NAME }}
        work-dir: ./infrastructure
        upsert: true
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    
    - name: Pulumi Up
      uses: pulumi/actions@v6
      with:
        command: up
        stack-name: ${{ env.PULUMI_STACK_NAME }}
        work-dir: ./infrastructure
        upsert: true
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    
    - name: Get Pulumi Outputs
      id: pulumi-outputs
      run: |
        pulumi stack output --json > outputs.json
        cat outputs.json
      working-directory: ./infrastructure
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # 4. Deploy to S3 and CloudFront
  deploy-to-aws:
    runs-on: ubuntu-latest
    needs: infrastructure-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: dist/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
    
    - name: Install Pulumi dependencies
      run: pnpm install
      working-directory: ./infrastructure
    
    - name: Get S3 bucket name and CloudFront distribution ID
      id: get-outputs
      run: |
        BUCKET_NAME=$(pulumi output bucketName --stack ${{ env.PULUMI_STACK_NAME }})
        DISTRIBUTION_ID=$(pulumi output cloudFrontDistributionId --stack ${{ env.PULUMI_STACK_NAME }})
        echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
      working-directory: ./infrastructure
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    
    - name: Sync files to S3
      run: |
        aws s3 sync dist/ s3://${{ steps.get-outputs.outputs.bucket-name }} --delete
    
    - name: Invalidate CloudFront distribution
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.get-outputs.outputs.distribution-id }} \
          --paths "/*"
    
    - name: Display website URL
      run: |
        CLOUDFRONT_URL=$(pulumi output cloudFrontUrl --stack ${{ env.PULUMI_STACK_NAME }})
        echo "üöÄ Website deployed successfully!"
        echo "üìç URL: https://$CLOUDFRONT_URL"
      working-directory: ./infrastructure
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
